#!/usr/bin/ksh
################################################################################
#
################################################################################
set -x
# Define the new log file name.
LOGFILE=/data/WEB/docs_private/uds_internal/pp/sysback/logs/clntsrv5.kshlog    
# Kill any [old] processes     
if [ -f $LOGFILE ]; then       
        fuser -k $LOGFILE      
fi                             
# Empty the log file.          
cat /dev/null > $LOGFILE       
BACKUP_LOG_FILE_DIR=/data/WEB/docs_private/uds_internal/pp/sysback/logs

logfile=/usr/local/scripts/sysback/backup.out
htfile=/usr/local/scripts/sysback/backup.html

BAD_NAME=0
ACTUAL_HOST_CHK=0
NUMERIC=0
part0='<tr>'
part1='<td>'
part2='</td>'
part3='</tr><tr>'
part4='<td><a href="/uds_internal/pp/sysback/logs/'
part5='"><FONT size=1>View Log</FONT></a></td>'
part6='"><FONT size=1>View Archive</FONT></a></td>'

((iscount=0))   #itsm    backup success counter
((ifcount=0))   #itsm    backup fail counter
((iwcount=0))   #itsm    backup warning counter
((afcount=0))   #altdisk backup fail counter
((ascount=0))   #altdisk backup success counter
((ancount=0))   #altdisk backup success counter
((mfcount=0))   #mksysb  backup fail counter
((mscount=0))   #mksysb  backup success counter
((incount=0))   #itsm    client not setup for backup
((ancount=0))   #altdisk client not setup for backup
((tcount=0))    #backup  server total
((ucount=0))    #unknown system counter
((ocount=0))    #old_rootvg counter

rm $logfile $htfile 
sleep 1
touch $logfile $htfile 
sleep 1

# create the html file header
print "<HTML>" >> $htfile
print "<HEAD>" >> $htfile
print "<TITLE>Sysback Server/Client and Result List For AIX/UNIX Servers</TITLE>" >> $htfile 
print "</HEAD>" >> $htfile
print "<BODY BGCOLOR=#FEFEEF TEXT=#000000 LINK=#0000FF VLINK=#000080 ALINK=#FF0000>" >> $htfile
print "<H1><FONT face=verdana,arial,helvetica size=+1>BACKUP Client/Server and Result List</FONT></H1>" >> $htfile
print "<p><FONT face="arial,helvetica" size=2>DATE: `date` </FONT>" >> $htfile
print "<br><FONT face=arial,helvetica size=2>Generated by ktazd216:$0 </FONT>" >> $htfile
print "<HR>" >> $htfile


function check_for_alias
{
set -x
        BAD_NAME=0
        clnt_tmp=$1
        ALIAS=$(nslookup $clnt_tmp |grep Alias )
        if [ $? -eq 0 ]; then
                ACTUAL_HOST=$(nslookup $clnt_tmp |grep Name: |awk '{print $2}')
                ACTUAL_HOST_CHK=1
                print "$ACTUAL_HOST"
        else
                CHECK_HOST=$(nslookup $clnt_tmp |grep Name: )
                if [ $? -eq 1 ]; then
                        BAD_NAME=1
                        #print "$clnt_tmp"
                else

                        ACTUAL_HOST=$clnt_tmp
                        print "$ACTUAL_HOST"
                fi
        fi
}

get_logs_from_client()
{
set -x
	NOPING=0
	rhost_long_tmp=$1
     first=`echo "$line" | /usr/bin/cut -c 1` # cut the first char
      if [[ $first != "#" ]]; then
         ping -c 2 -i 3 $rhost_long_tmp
          if [[ $? = 0 ]]; then
                   /usr/local/scripts/sysback/servsftp  $rhost_long_tmp  1>>$LOGFILE 2>>$LOGFILE
		else
		NOPING=1
		status3="<FONT size=1 color="red">CANT_PING</FONT>"
		status2="<FONT size=1 color="red">CANT_PING</FONT>"
		status1="<FONT size=1 color="red">CANT_PING</FONT>"
		status="<FONT size=1 color="red">CANT_PING</FONT>"
          fi
      fi
}
check_log_file_itsm()
{
	#BACKUP_LOG_FILE_DIR Search for SUCCESS
	LOG_SERVERNUM_CHK_TMP=$1
	DOMAIN_TMP=$2
	FILE_GOOD=0
	for n in s i p d q u b 1b 2b f e
	do
		if [ -f $BACKUP_LOG_FILE_DIR/$LOG_SERVERNUM_CHK_TMP$n.sysbkup.kshlog ]; then
			for m in "FAILURE:" "SUCCESS:" "WARNING:"
			do
				if [ grep "$m" $BACKUP_LOG_FILE_DIR/$LOG_SERVERNUM_CHK_TMP$n.sysbkup.kshlog ]; then 
					FILE_GOOD=1
				fi
			done
		fi
		if [ -f $BACKUP_LOG_FILE_DIR/$LOG_SERVERNUM_CHK_TMP$n$DOMAIN_TMP.sysbkup.kshlog ]; then
			for p in "FAILURE:" "SUCCESS:" "WARNING:"
                        do
                                if [ grep "$p" $BACKUP_LOG_FILE_DIR/$LOG_SERVERNUM_CHK_TMP$n$DOMAIN_TMP.sysbkup.kshlog ]; then
                                        FILE_GOOD=1
                                fi
                        done
		fi
	done
			
}

get_logs_from_backup_server()
{
set -x

/usr/bin/sftp -b /home/ossadmin/bgetlogsftp ktazp131 1>>$LOGFILE 2>>$LOGFILE
/usr/bin/sftp -b /home/ossadmin/bgetlogsftp ktazp1560  1>>$LOGFILE 2>>$LOGFILE
/usr/bin/sftp -b /home/ossadmin/bgetlogsftp ktazd2750 1>>$LOGFILE 2>>$LOGFILE
/usr/bin/sftp -b /home/ossadmin/bgetlogsftp ktazp95 1>>$LOGFILE 2>>$LOGFILE
/usr/bin/sftp -b /home/ossadmin/bgetlogsftp ktazp8001 1>>$LOGFILE 2>>$LOGFILE
/usr/bin/sftp -b /home/ossadmin/bgetlogsftp fig 1>>$LOGFILE 2>>$LOGFILE
/usr/bin/sftp -b /home/ossadmin/bgetlogsftp ktazp2776 1>>$LOGFILE 2>>$LOGFILE

/home/ossadmin/copyktazd216.ksh 1>>$LOGFILE 2>>$LOGFILE

/usr/local/scripts/sysback/servsftp5 ktazd216  1>>$LOGFILE 2>>$LOGFILE
/usr/local/scripts/sysback/servsftp5 ktazp131   >>$LOGFILE
/usr/local/scripts/sysback/servsftp5 ktazp1560  >>$LOGFILE
/usr/local/scripts/sysback/servsftp5 ktazp95    >>$LOGFILE
/usr/local/scripts/sysback/servsftp5 ktazd2750  >>$LOGFILE
/usr/local/scripts/sysback/servsftp5 fig        >>$LOGFILE
/usr/local/scripts/sysback/servsftp5 ktazp8001  >>$LOGFILE
/usr/local/scripts/sysback/servsftp5 ktazp2776  >>$LOGFILE
}

itsm()
{
set -x
	rhost_long_tmp=$1
	if [ $NUMERIC -eq 0 ]; then
                rhost_short_tmp=$(echo $rhost_long_tmp |cut -d"." -f1)
		client=$2
		domain=$3
		h_num=$4
        else
                rhost_short_tmp=$rhost_long_tmp
		client=$rhost_long_tmp
		domain=unknown
        fi
	client_primary_name=""
	KTAZ=0

########################
# Check ITSM status/logs
	DIF_NAME=0
  	if [ -f /data/WEB/docs_private/uds_internal/pp/sysback/logs/$rhost_short_tmp.servers ]; then
  		server=$(cat /data/WEB/docs_private/uds_internal/pp/sysback/logs/$rhost_short_tmp.servers | /usr/bin/awk '{print $1}')
	else
		if [ -f /data/WEB/docs_private/uds_internal/pp/sysback/logs/$rhost_long_tmp.servers ]; then
			server=$(cat /data/WEB/docs_private/uds_internal/pp/sysback/logs/$rhost_long_tmp.servers | /usr/bin/awk '{print $1}' |cut -d"." -f1)
			#rhost_short_tmp=$rhost_long_tmp
		else
			KTAZ_CHECK=$(echo $rhost_short_tmp |grep ktaz)
			if [ "$KTAZ_CHECK" != "" ]; then
			KTAZ=1
			DIF_NAME=0
			  for n in s i p d q u b 1b 2b f e
			  do
				if [ -f /data/WEB/docs_private/uds_internal/pp/sysback/logs/ktaz$n$h_num.servers ]; then
					client_primary_name=ktaz$n$h_num
					DIF_NAME=1
					server=$(cat /data/WEB/docs_private/uds_internal/pp/sysback/logs/$client_primary_name.servers | /usr/bin/awk '{print $1}')
					rhost_short_tmp=$client_primary_name
					break
				else
					if [ -f /data/WEB/docs_private/uds_internal/pp/sysback/logs/ktaz$n$h_num.$domain.servers ]; then
						client_primary_name="ktaz$n$h_num.$domain"
						DIF_NAME=1
						server=$(cat /data/WEB/docs_private/uds_internal/pp/sysback/logs/$client_primary_name.servers | /usr/bin/awk '{print $1}' |cut -d"." -f1)
						rhost_short_tmp=$client_primary_name
						break
					fi
				fi
			  done
			fi
		fi
  	fi
	
  	if [ -f /data/WEB/docs_private/uds_internal/pp/sysback/logs/$rhost_short_tmp.sysbkup.kshlog ]; then
		GO=1
		for ST_STRING in "FAILURE:" "SUCCESS:" "WARNING:" 
		do
       			status=$(cat /data/WEB/docs_private/uds_internal/pp/sysback/logs/$rhost_short_tmp.sysbkup.kshlog | grep "$ST_STRING" | /usr/bin/awk '{print $1}')
			status_tmp=$status
  			if [ "$status" != "" ]; then
				case "$status" in
				FAILURE:)
					status="<FONT color="red" size=1>FAILURE:</FONT>"
				;;
				SUCCESS:)
					status="<FONT color="#54C571" size=1>SUCCESS:</FONT>"
				;;
				WARNING:)
					status="<FONT color="#54C571" size=1>WARNING:</FONT>"
				;;
				*)
					status="<FONT color="#8D38C9" size=1>unknown</FONT>"
				;;
				esac

				break
			fi
		done	
		if [ "$status" = "" ]; then
			if [ $NOPING -eq 1 ]; then
				status="<FONT size=1 color="red">CANT_PING</FONT>"
			else
				status=unknown
			fi
		fi
	else
		status=NO_LOG
                        KTAZ_CHECK=$(echo $rhost_short_tmp |grep ktaz)
			GO=0
			BREAK=0
			DIF_NAME=0
                        if [ "$KTAZ_CHECK" != "" ]; then
			KTAZ=1
                          for n in s i p d q u b 1b 2b f e
                          do
				DIF_NAME=0
				if [ -f /data/WEB/docs_private/uds_internal/pp/sysback/logs/ktaz$n$h_num.sysbkup.kshlog ]; then
					client_primary_name="ktaz$n$h_num"
					DIF_NAME=1
					GO=1
				else
					if [ -f /data/WEB/docs_private/uds_internal/pp/sysback/logs/ktaz$n$h_num.$domain.sysbkup.kshlog ]; then
						client_primary_name="ktaz$n$h_num.$domain"
						###  FOUND the primary hostname of server BREAK OUT ###
						DIF_NAME=1
						GO=1
					fi
				fi
				if [ $GO -eq 1 ]; then
					for ST_STRING in "FAILURE:" "SUCCESS:" "WARNING:"
					do
						status=$(cat /data/WEB/docs_private/uds_internal/pp/sysback/logs/$client_primary_name.sysbkup.kshlog | grep "$ST_STRING" | /usr/bin/awk '{print $1}')
						status_tmp=$status
						if [ "$status" != "" ]; then
                                			case "$status" in
                                			FAILURE:)
                                        			status="<FONT color="red" size=1>FAILURE:</FONT>"
                                			;;
                                			SUCCESS:)
                                        			status="<FONT color="#54C571" size=1>SUCCESS:</FONT>"
                                			;;
                                			WARNING:)
                                        			status="<FONT color="#54C571" size=1>WARNING:</FONT>"
                                			;;
                                			*)	
                                        			status="<FONT color="#8D38C9" size=1>unknown</FONT>"
                                			;;
                                			esac

							BREAK=1
                                			break
						fi
					done
					if [ "$status" = "" ]; then
						break
					fi
				fi
				if [ $BREAK -eq 1 ]; then
					break
				fi
			  done
                        fi
	fi

	echo "$part0" >>$logfile
	if [ $NOPING -eq 1 ]; then
       		echo "$part1<FONT size=2 color="red"><BLINK>$client</BLINK></FONT>$part2" >>$logfile
		status=CANT_PING
	else
		if [ $GO -eq 0 ]; then
			status=NO_LOG
		fi
       		echo "$part1<FONT size=2>$client</FONT>$part2" >>$logfile
	fi
		
       	echo "$part1<FONT size=2>$domain</FONT>$part2" >>$logfile
       	echo "$part1<FONT size=2>$server</FONT>$part2" >>$logfile
	if [ "$status" = "" ]; then
		status=unknown
	fi
       		echo "$part1<FONT size=1 color="red" >$status</FONT>$part2" >>$logfile

	if [ $DIF_NAME -eq 1 ]; then
		rhost_short_tmp=$client_primary_name
	fi

	if [ -f /data/WEB/docs_private/uds_internal/pp/sysback/logs/$rhost_short_tmp.sysbkup.kshlog ]; then 
       		echo "$part4$rhost_short_tmp.sysbkup.kshlog$part5" >>$logfile
	else
		echo "$part1$itsmlogs$part2" >>$logfile
	fi
	if [ -f /data/WEB/docs_private/uds_internal/pp/sysback/logs/$rhost_short_tmp.tsmarch.txt ]; then
		echo "$part4$rhost_short_tmp.tsmarch.txt$part6" >>$logfile
	else
		echo "$part1$itsmlogs$part2" >>$logfile
	fi
       	if [ "$status_tmp" = "FAILURE:" ]; then
		((ifcount=ifcount+1))
  	fi
  	if [ "$status_tmp" = "WARNING:" ]; then	
		((iwcount=iwcount+1))
  	fi
  	if [ "$status_tmp" = "Not-Setup" ]; then
		((incount=incount+1))
  	fi
  	if [ "$status_tmp" = "SUCCESS:" ]; then
		((iscount=iscount+1))
  	fi
  	if [ "$status_tmp" = "unknown" ]; then
		((ucount=ucount+1))
  	fi
}

altdisk()
{
set -x
	rhost_long_tmp=$1
	rhost_alias=$2
	bdevice=""	
	if [ $NUMERIC -eq 0 ]; then
                rhost_short_tmp=$(echo $rhost_long_tmp |cut -d"." -f1)
        else
                rhost_short_tmp=$rhost_long_tmp
        fi
##############################
#### Check altdisk status/logs
	KTAZ_CHECK=$(echo $rhost_short_tmp |grep ktaz)
	if [ "$KTAZ_CHECK" != "" ]; then
		KTAZ=1
	fi
	if [ $KTAZ -eq 1 ]; then

             for NAME_TYPE in s i p d q u b 1b 2b f e
               do
			PREFIX_SRCH=$(echo $rhost_short_tmp |grep "ktaz$NAME_TYPE")
			if [ "$PREFIX_SRCH" != "" ]; then
				THOUT_ktaz=$(echo $rhost_short_tmp |cut -d"$NAME_TYPE" -f2)
DELIMITER=$NAME_TYPE
				WITHOUT_ktaz=$(echo $rhost_short_tmp |cut -d"$NAME_TYPE" -f2)
				break
			fi
               done
	for NAME_TYPE in i s i p d q u b 1b 2b f e
	do
			rhost_short_tmp="ktaz$NAME_TYPE$WITHOUT_ktaz"
                   if [ -f /data/WEB/docs_private/uds_internal/pp/sysback/logs/$rhost_short_tmp.altDiskBkup.txt ]; then
                       break
                   fi
	done
	WITHOUT_ktaz=""
        fi

	if [ -f /data/WEB/docs_private/uds_internal/pp/sysback/logs/$rhost_short_tmp.altDiskBkup.txt ]; then
		if grep "This server currently have old_rootvg" /data/WEB/docs_private/uds_internal/pp/sysback/logs/$rhost_short_tmp.altDiskBkup.txt >/dev/null
		then
			status2="<FONT color="purple" size=1>old_rootvg</FONT>"
			((ocount=ocount+1))
		else
			if grep "Successfully" /data/WEB/docs_private/uds_internal/pp/sysback/logs/$rhost_short_tmp.altDiskBkup.txt > /dev/null
			then
				status2="<FONT color="#54C571" size=1>SUCCESS:</FONT>"
				bdevice_tmp=$(grep BDEVICE /data/WEB/docs_private/uds_internal/pp/sysback/logs/$rhost_short_tmp.altDiskBkup.txt| cut -d"=" -f2)
				for bd in $(echo $bdevice_tmp)
				do
					bdevice="$bd</br>$bdevice"
				done
				((ascount=ascount+1))
			else
				if grep "Not enough free SCSI disk, exiting..." /data/WEB/docs_private/uds_internal/pp/sysback/logs/$rhost_short_tmp.altDiskBkup.txt > /dev/null
				then
					status2="<FONT color="red" size=2>Not enough disks</FONT>" 
					((afcount=afcount+1))       
				fi
				if grep "Non Supported" /data/WEB/docs_private/uds_internal/pp/sysback/logs/$rhost_short_tmp.altDiskBkup.txt > /dev/null
				then
					status2="<FONT color="red" size=1>FAILURE:</FONT>"
					((ancount=ancount+1))       
				fi
			fi
		fi
	fi
	altlogs=none
	if [ "$status2" = "unknown" ]; then
                echo "$part1<FONT size=2>$status2</FONT>$part2" >>$logfile
        else
                echo "$part1$status2$part2" >>$logfile
        fi

	if [ "$bdevice" = "" ]; then
		bdevice=none
	fi
	echo "$part1<FONT size=2>$bdevice</FONT>$part2" >>$logfile
	if [ -f /data/WEB/docs_private/uds_internal/pp/sysback/logs/$rhost_short_tmp.altDiskBkup.txt ]; then
		echo "$part4$rhost_short_tmp.altDiskBkup.txt$part5" >>$logfile
	else
		echo "$part1<FONT size=2>$altlogs</FONT>$part2" >>$logfile
	fi
	if [ "$status2" = "unknown" ]; then 
       		((ucount=ucount+1))        
	fi
	KTAZ=0
}

mksysb()
{
set -x
 	rhost_long_tmp=$1
	if [ $NUMERIC -eq 0 ]; then
        	rhost_short_tmp=$(echo $rhost_long_tmp |cut -d"." -f1)
	else
		rhost_short_tmp=$rhost_long_tmp
	fi
#############################                                
#### check MKSYSB status/logs
	if [ -f /data/WEB/docs_private/uds_internal/pp/sysback/logs/$rhost_short_tmp.mksysb.log.txt ]; then
		if grep "$rhost_short_tmp: mksysb completed to $rhost_short_tmp.mksysb successfully." /data/WEB/docs_private/uds_internal/pp/sysback/logs/$rhost_short_tmp.mksysb.log.txt > /dev/null
		then
			status3="<FONT color="#54C571" size=1>SUCCESS:</FONT>"
			server2=$(grep "$rhost_short_tmp: running mksysb ... to file" /data/WEB/docs_private/uds_internal/pp/sysback/logs/$rhost_short_tmp.mksysb.log.txt | awk '{print $11}') > /dev/null
			logs="$rhost_short_tmp.mksysb.log.txt"
			((mscount=mscount+1))
		fi
	fi
	if [ -f /data/WEB/docs_private/uds_internal/pp/sysback/logs/$rhost_short_tmp.mksysb.err.txt ]; then
		if grep "$rhost_short_tmp: ERROR mksysb did not complete to $rhost_short_tmp.mksysb successfully." /data/WEB/docs_private/uds_internal/pp/sysback/logs/$rhost_short_tmp.mksysb.err.txt > /dev/null
		then
			status3="<FONT color="red" size=1>FAILURE:</FONT>"
			logs="$rhost_short_tmp.mksysb.err.txt"
			((mfcount=mfcount+1))
		fi
	fi
	if [ "$status3" = "unknown" ]; then
                echo "$part1<FONT size=2>$status3</FONT>$part2" >>$logfile
        else
                echo "$part1$status3$part2" >>$logfile
        fi
	echo "$part1<FONT size=2>$server2</FONT>$part2" >>$logfile

	status3_check=$(echo $status3 |grep "SUCCESS:")

	if [ "$status3_check" != "" ]; then 
		echo "$part4$logs$part5" >>$logfile
	fi
	
	status3_check=$(echo $status3 |grep "FAILURE:")

	if [ "$status3_check" != "" ]; then        
        	echo "$part4$logs$part5" >>$logfile 
	fi
	if [ "$status3" = "unknown" ]; then                       
        	echo "$part1<FONT size=2>$mksyslogs</FONT>$part2" >>$logfile    
        	((ucount=ucount+1))                         
	fi                                                  
	if [ -f /data/WEB/docs_private/uds_internal/pp/sysback/logs/$rhost_short_tmp.tsmarch2.txt ]; then 
		echo "$part4$rhost_short_tmp.tsmarch2.txt$part6" >>$logfile
	else
		echo "$part1$mksyslogs$part2" >>$logfile
	fi
	echo "$part3" >>$logfile
}

################################################
####### MAIN ##### MAIN ##### MAIN #############
################################################

#get_logs_from_backup_server

for line in `cat /usr/local/scripts/cfgtable.test`
do
        #####  READ IN the list of servers ######
	NUMERIC=0
        status_HTML="<FONT size=2>unknown</FONT>"                 ## initiate backup status ##
        status=unknown                 ## initiate backup status ##
        client_tmp=$line
        client_tmp_chk=$(echo $line |cut -d"." -f1 |sed 's/[0-9]//g')
        if [ "$client_tmp_chk" = "" ]; then
                ## if blank then it is numeric hostname : test for IP address without hostname ##
                client=$client_tmp
		NUMERIC=1
                rhost_long=$client
        else
                client=`echo $line |cut -f 1 -d .`
                domain=$(echo $line |cut -f2-5 -d".")
                HOSTNAME_N=$client
                ALIAS_CHK=$(nslookup $line |grep Alias |awk '{print $2}' |cut -d"." -f1)
                client=$(check_for_alias $line)
                if [ -n "$client" ] && [ "$client" != "$HOSTNAME_N.$domain" ]; then
                        ACTUAL_HOST_CHK=1       # Check for alias function result yes
                else
                        ACTUAL_HOST_CHK=0       # Check for alias function result no
                        if [ "$client" = "" ]; then
                                BAD_NAME=1
                        fi
                fi
                if [ $ACTUAL_HOST_CHK -eq 1 ]; then
                        CLIENT_N=$(echo $client |cut -d"." -f1)
                        if [ "$HOSTNAME_N" = "$CLIENT_N" ]; then
                                HOSTNAME_N="alias"
                        fi
                        client_actual_with_alias=$(echo "$client($HOSTNAME_N)")
                        rhost_long=$client
                        rhost_short=$(echo $client |cut -d"." -f1)
                else
                        if [ $BAD_NAME -eq 0 ]; then
                                client_actual_with_alias="$HOSTNAME_N"
                                rhost_long="$HOSTNAME_N.$domain"
                                rhost_short="$HOSTNAME_N"
				rhost_num=$(echo $HOSTNAME_N |sed 's/[a-z]//g')
                        else
                                status="Hostname_ERR"
                                client_actual_with_alias="$HOSTNAME_N"
                                rhost_long="$HOSTNAME_N.$domain"
                                rhost_short="$HOSTNAME_N"
				rhost_num=$(echo $HOSTNAME_N |sed 's/[a-z]//g')
                        fi
                fi
        fi

	get_logs_from_client $rhost_long

	#status=Not-Setup
	status1_HTML="<FONT size=2>unknown</FONT>"
	status1=unknown
	status2_HTML="<FONT size=2>unknown</FONT>"
	status2=unknown
	status3_HTML="<FONT size=2>unknown</FONT>"
	status3=unknown
	server="<FONT size=2>unknown</FONT>"
	server2="<FONT size=2>unknown</FONT>"
	mksyslogs="<FONT size=2>none</FONT>"
	itsmlogs="<FONT size=2>none</FONT>"
	
	itsm $rhost_long $client_actual_with_alias $domain $rhost_num

	if [ $DIF_NAME -eq 1 ]; then
                rhost_short_tmp=$client_primary_name
		print "$rhost_short_tmp"
		altdisk $rhost_short_tmp $client_actual_with_alias
       	else
		altdisk $rhost_long $client_actual_with_alias
	fi

	mksysb $rhost_long $client_actual_with_alias
done

## TALY SECTION ##
((tcount=iscount+ascount+ancount+mscount+incount+ancount+ifcount+afcount+mfcount+ucount+ocount))
print "<div ALIGN=RIGHT><FONT face=verdana,arial,helvetica size=2><b>Total ITSM backup completed: $iscount</b></FONT></div>" >> $htfile
print "<div ALIGN=RIGHT><FONT face=verdana,arial,helvetica size=2><b>Total ITSM backup failed: $ifcount</b></FONT></div>" >> $htfile
print "<div ALIGN=RIGHT><FONT face=verdana,arial,helvetica size=2><b>Total ITSM not configured: $incount</b></FONT></div>" >> $htfile
print "<div ALIGN=RIGHT><FONT face=verdana,arial,helvetica size=2><b>Total ITSM backup warning: $iwcount</b></FONT></div>" >>$htfile
print "<div ALIGN=RIGHT><FONT face=verdana,arial,helvetica size=2><b>Total ALTDISK backup completed: $ascount</b></FONT></div>" >> $htfile
print "<div ALIGN=RIGHT><FONT face=verdana,arial,helvetica size=2><b>Total ALTDISK backup failed: $afcount</b></FONT></div>" >> $htfile
print "<div ALIGN=RIGHT><FONT face=verdana,arial,helvetica size=2><b>Total MKSYSB backup completed: $mscount</b></FONT></div>" >> $htfile
print "<div ALIGN=RIGHT><FONT face=verdana,arial,helvetica size=2><b>Total MKSYSB backup failed: $mfcount</b></FONT></div>" >> $htfile
print "<div ALIGN=RIGHT><FONT face=verdana,arial,helvetica size=2><b>Total backup unknown: $ucount</b></FONT></div>" >> $htfile
print "<div ALIGN=RIGHT><FONT face=verdana,arial,helvetica size=2><b>Total ALTDISK with not enough disks: $ancount </b></FONT></div>" >> $htfile
print "<div ALIGN=RIGHT><FONT face=verdana,arial,helvetica size=2><b>Total ALTDISK with old_rootvg: $ocount</b></FONT></div>" >> $htfile
print "<div ALIGN=RIGHT><FONT face=verdana,arial,helvetica size=2><b>Total backup checked: $tcount</b></font></div>" >> $htfile
print "<HR>" >> $htfile

## CREATING TABLE ##
print "<table border=2 cellspacing=2 cellpadding=2>" >>$htfile  
print "<tr><b>" >>$htfile                                       
print "<td><FONT face=verdana,arial,helvetica size=1><b>CLIENT(alias)</b></FONT></td>"  >>$htfile
print "<td><FONT face=verdana,arial,helvetica size=1><b>DOMAIN</b></FONT></td>" >>$htfile
print "<td><FONT face=verdana,arial,helvetica size=1><b>ITSM</b></FONT></td>"  >>$htfile
print "<td><FONT face=verdana,arial,helvetica size=1><b>ITSM</b></FONT></td>" 	 >>$htfile
print "<td><FONT face=verdana,arial,helvetica size=1><b>ITSM</b></FONT></td>" >>$htfile
print "<td><FONT face=verdana,arial,helvetica size=1><b>ITSM</b></FONT></td>"  >>$htfile
print "<td><FONT face=verdana,arial,helvetica size=1><b>ALTDISK</b></FONT></td>" 	 >>$htfile
print "<td><FONT face=verdana,arial,helvetica size=1><b>ALTDISK</b></FONT></td>" 	 >>$htfile
print "<td><FONT face=verdana,arial,helvetica size=1><b>ALTDISK</b></FONT></td>" >>$htfile
print "<td><FONT face=verdana,arial,helvetica size=1><b>MKSYSB</b></FONT></td>"    >>$htfile    
print "<td><FONT face=verdana,arial,helvetica size=1><b>MKSYSB</b></FONT></td>"    >>$htfile
print "<td><FONT face=verdana,arial,helvetica size=1><b>MKSYSB</b></FONT></td>" >>$htfile 
print "<td><FONT face=verdana,arial,helvetica size=1><b>MKSYSB</b></FONT></td>"  >>$htfile  
print "</tr><tr>"        >>$htfile
print "<td><FONT face=verdana,arial,helvetica size=1><b>NAME</b></FONT></td>"    >>$htfile    
print "<td><FONT face=verdana,arial,helvetica size=1><b>NAME</b></FONT></td>"    >>$htfile    
print "<td><FONT face=verdana,arial,helvetica size=1><b>SERVER</b></FONT></td>"    >>$htfile    
print "<td><FONT face=verdana,arial,helvetica size=1><b>STATUS</b></FONT></td>"  >>$htfile    
print "<td><FONT face=verdana,arial,helvetica size=1><b>LOG</b></FONT></td>"  >>$htfile      
print "<td><FONT face=verdana,arial,helvetica size=1><b>ARCHIVE</b></FONT></td>"  >>$htfile      
print "<td><FONT face=verdana,arial,helvetica size=1><b>STATUS</b></FONT></td>"     >>$htfile      
print "<td><FONT face=verdana,arial,helvetica size=1><b>BOOT-DEV</b></FONT></td>"     >>$htfile      
print "<td><FONT face=verdana,arial,helvetica size=1><b>LOG</b></FONT></td>"     >>$htfile   
print "<td><FONT face=verdana,arial,helvetica size=1><b>STATUS</b></FONT></td>"    >>$htfile
print "<td><FONT face=verdana,arial,helvetica size=1><b>SERVER</b></FONT></td>"     >>$htfile
print "<td><FONT face=verdana,arial,helvetica size=1><b>LOG</b></FONT></td>" >>$htfile 
print "<td><FONT face=verdana,arial,helvetica size=1><b>ARCHIVE</b></FONT></td>" >>$htfile
cat $logfile >> $htfile
print "</tr>" >> $htfile
print "</table>" >> $htfile
print "</BODY>" >> $htfile
print "</HTML>" >> $htfile

cp /usr/local/scripts/sysback/backup.html /data/WEB/docs_private/uds_internal/pp/sysback/backup.html
exit 0
