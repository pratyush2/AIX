#!/usr/bin/ksh
################################################################################
#
# Written by : Kevin Lee - USS, Associate System Programmer 
# Date   : 09/28/99
# Modified: 02/03/2000
# Last Modified: 02/12/2001
# Last Modified: 06/2/2007
# Description: This scripts run weekly to collect the server and client list
#              and also checking for the result of the alt_disk backups
################################################################################
# Define the new log file name.
set -x
LOGFILE=/data/WEB/docs_private/uds_internal/pp/sysback/logs/clntsrv2.kshlog    
# Kill any [old] processes     
if [ -f $LOGFILE ]; then       
        fuser -k $LOGFILE      
fi                             
# Empty the log file.          
cat /dev/null > $LOGFILE       
orgfile=/usr/local/scripts/cfgtable.aix
logfile=/usr/local/scripts/sysback/altdiskresult.out
htfile=/usr/local/scripts/sysback/altdiskresult.html
pfile=/usr/local/scripts/sysback/altdiskpingable.out

BAD_NAME=0
ACTUAL_HOST_CHK=0
userid=ossadmin
password=Ets0ss
part0='<tr>'
part1='<td>'
part2='</td>'
part3='</tr>'
part4='<td><a href="/uds_internal/pp/sysback/logs/'
part5='"&TYPE=Log>View Alt_Disk_Log</a></td>'
bdevice="None"

((scount=0))  # backup success counter
((fcount=0))  # backup fail counter
((tcount=0))  # backup server total
((ncount=0))  # not supported server total
((ucount=0))  # unknown system counter
((ocount=0))  # old_rootvg counter

rm $logfile $htfile $pfile 
touch $logfile $htfile $pfile 

# create the html file header
print "<HTML>" >> $htfile
print "<HEAD>" >> $htfile
print "<TITLE>Alt_Disk Client Result List For AIX/UNIX Servers</TITLE>" >> $htfile 
print "</HEAD>" >> $htfile
print "<BODY BGCOLOR=#FEFEEF TEXT=#000000 LINK=#0000FF VLINK=#000080 ALINK=#FF0000>" >> $htfile
print "<H1><FONT face=verdana,arial,helvetica size=+1>ALT_DISK BACKUP Client Result List</FONT></H1>" >> $htfile
print "<p><FONT face="arial,helvetica" size=2>DATE: `date` </FONT>" >> $htfile
print "<br><FONT face=arial,helvetica size=2>Generated by ktazd216:$0 </FONT>" >> $htfile
print "<HR>" >> $htfile
#
#
#
function check_for_alias
{
set -x
	BAD_NAME=0
	clnt_tmp=$1
	ALIAS=$(nslookup $clnt_tmp |grep Alias )
	if [ $? -eq 0 ]; then
		ACTUAL_HOST=$(nslookup $clnt_tmp |grep Name: |awk '{print $2}')
		ACTUAL_HOST_CHK=1
		print "$ACTUAL_HOST"
	else
		CHECK_HOST=$(nslookup $clnt_tmp |grep Name: ) 
		if [ $? -eq 1 ]; then
			BAD_NAME=1
			#print "$clnt_tmp"
		else
		
			ACTUAL_HOST=$clnt_tmp
			print "$ACTUAL_HOST"
		fi
	fi
}

######## MAIN #############

for line in `cat /usr/local/scripts/cfgtable.aix`                      
do 
	#####  READ IN the list of servers ######                     
	status=unknown			## initiate backup status ##
	client_tmp=$line
	client_tmp_chk=$(echo $line |cut -d"." -f1 |sed 's/[0-9]//g')
	if [ "$client_tmp_chk" = "" ]; then
		## if blank then it is numeric hostname : test for IP address without hostname ##
		client=$client_tmp
 		rhost_long=$client
	else
		client=`echo $line |cut -f 1 -d .`
		domain=$(echo $line |cut -f2-5 -d".")
		HOSTNAME_N=$client
		ALIAS_CHK=$(nslookup $line |grep Alias |awk '{print $2}' |cut -d"." -f1)
		client=$(check_for_alias $line)
		if [ -n "$client" ] && [ "$client" != "$HOSTNAME_N.$domain" ]; then
			ACTUAL_HOST_CHK=1	# Check for alias function result yes
		else
			ACTUAL_HOST_CHK=0	# Check for alias function result no
			if [ "$client" = "" ]; then
				BAD_NAME=1
			fi
		fi
		if [ $ACTUAL_HOST_CHK -eq 1 ]; then
			CLIENT_N=$(echo $client |cut -d"." -f1)
			if [ "$HOSTNAME_N" = "$CLIENT_N" ]; then
				HOSTNAME_N="alias"
			fi
			client_actual_with_alias=$(echo "$client($HOSTNAME_N)")
			rhost_long=$client
			rhost_short=$(echo $client |cut -d"." -f1)
		else
			if [ $BAD_NAME -eq 0 ]; then
				client_actual_with_alias="$HOSTNAME_N"
				rhost_long="$HOSTNAME_N.$domain"
				rhost_short="$HOSTNAME_N"
			else
				status="Hostname_ERR"
				client_actual_with_alias="$HOSTNAME_N"
				rhost_long="$HOSTNAME_N.$domain"
				rhost_short="$HOSTNAME_N"
			fi
		fi
	fi

	bdevice="N/A"
  	if [ -f /data/WEB/docs_private/uds_internal/pp/sysback/logs/$rhost_short.altDiskBkup.txt ]; then
		chmod +r /data/WEB/docs_private/uds_internal/pp/sysback/logs/$rhost_short.altDiskBkup.txt
	        
		if grep "This server currently have old_rootvg" /data/WEB/docs_private/uds_internal/pp/sysback/logs/$rhost_short.altDiskBkup.txt >/dev/null 
                then                                            
                	status="old_rootvg"                     
			bdevice=$(grep BDEVICE /data/WEB/docs_private/uds_internal/pp/sysback/logs/$rhost_short.altDiskBkup.txt| cut -d"=" -f2)
			((ocount=ocount+1))
			FAIL=0
                fi                                            
       		if grep "Successfully" /data/WEB/docs_private/uds_internal/pp/sysback/logs/$rhost_short.altDiskBkup.txt > /dev/null
		then
			status="Successful"
			bdevice=$(grep BDEVICE /data/WEB/docs_private/uds_internal/pp/sysback/logs/$rhost_short.altDiskBkup.txt| cut -d"=" -f2)
			bdevice=$(echo $bdevice |sed 's/ / or /g')
			((scount=scount+1))
			FAIL=0
		fi

		if grep "Not enough free disk, exiting..." /data/WEB/docs_private/uds_internal/pp/sysback/logs/$rhost_short.altDiskBkup.txt > /dev/null
		then
			FAIL=0
			status="Not enough disks"
			((ncount=ncount+1))
		fi


	#	if [ $FAIL -ge 1 ]; then
	#		status="Failure/None"
	#			((fcount=fcount+1))
	#	fi



  	fi
		
		echo "$part0" >>$logfile
       		echo "$part1$client_actual_with_alias$part2" >>$logfile
       		echo "$part1$domain$part2" >>$logfile
       		echo "$part1$status$part2" >>$logfile
       		echo "$part1$bdevice$part2" >>$logfile
		if [ "$status" = "Failure" ] || [ "$status" = "Successful" ] || [ "$status" = "Not enough disks" ]; then
			echo "$part4$rhost_short.altDiskBkup.txt$part5" >>$logfile
		else
			NOLOG="NO_LOG_FILE"
			echo "$part1$NOLOG$part2" >> $logfile
		fi
       		echo "$part3" >>$logfile
		if [ "$status" = "unknown" ] || [ "$status" = "None" ]; then
			((ucount=ucount+1))
		fi
  	echo "$rhost_long status is $status" >>$LOGFILE
done
((tcount=scount+fcount+ucount+ncount+ocount))
# combine the logfile and html file together
print "<div ALIGN=RIGHT><FONT face=verdana,arial,helvetica size=2><b>Total backup completed: $scount</b></FONT></div>" >> $htfile
print "<div ALIGN=RIGHT><FONT face=verdana,arial,helvetica size=2><b>Total backup failed: $fcount</b></FONT></div>" >> $htfile
print "<div ALIGN=RIGHT><FONT face=verdana,arial,helvetica size=2><b>Total backup unknown: $ucount</b></FONT></div>" >> $htfile
print "<div ALIGN=RIGHT><FONT face=verdana,arial,helvetica size=2><b>Total backup check: $tcount</b></FONT></div>" >> $htfile
print "<div ALIGN=RIGHT><FONT face=verdana,arial,helvetica size=2><b>Total Not enough disk servers: $ncount</b></FONT></div>" >> $htfile
print "<div ALIGN=RIGHT><FONT face=verdana,arial,helvetica size=2><b>Total old_rootvg: $ocount</b></FONT></div>" >> $htfile
print "<HR>" >> $htfile
print "<table border=2 cellspacing=2 cellpadding=2>" >>$htfile  
print "<tr><b>" >>$htfile                                       
print "<td><b>CLIENT(alias)</b></td>" >>$htfile
print "<td><b>DOMAIN</b></td>" >>$htfile
print "<td><b>STATUS</b></td>" >>$htfile
print "<td><b>ALTDISK BOOT DEVICE</b></td>" >>$htfile
print "<td><b>LOG</b></td>" >>$htfile
cat $logfile >> $htfile
print "</tr>" >> $htfile
print "</table>" >> $htfile
print "</BODY>" >> $htfile
print "</HTML>" >> $htfile
#
#
cp /usr/local/scripts/sysback/altdiskresult.html /data/WEB/docs_private/uds_internal/pp/sysback/altdiskresult.html
exit 0
